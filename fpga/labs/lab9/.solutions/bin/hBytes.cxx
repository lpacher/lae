//
// Simple ROOT macro to plot the "trend" of bytes generated by an 8-bit Linear-Feedback Shift Register (LFSR).
// The "random" sequence repeats after 256 values, fill the histogram to show only the first 4 replicated sequences.
//
// Command line usage:
//
//   % cd /path/to/lab9
//   % root bin/hBytes.cxx
//
// By default the macro assumes to plot work/sim/LFSR.txt, but you can also start ROOT from another directory
// and specify a different target file. As an example:
//
//   % cd /path/to/lab9/test
//   % root -l
//   root[] .L ../bin/hBytes.cxx
//   root[] hBytes("../work/sim/LFSR.txt")
//
// Luca Pacher - pacher@to.infn.it
// Spring 2020
//


void hBytes (char *fileName="work/sim/LFSR.txt") {

   gROOT -> Reset() ;

   gStyle->SetOptStat(0) ;   // don't show the statistics box 

   int value ;   // integer pseudo-random value from ASCII file

   // open file handler
   ifstream filePtr ;

   filePtr.open(fileName) ;

   if (!filePtr) {

      std::cout << "\n**ERROR: " << fileName << " Not such file or directory. Force an exit now." << std::endl ;

      // script failure
      exit(1) ;
    }


   // histogram the "trend" of shift-register outputs (not a true histogram indeed, just a trend)
   TH1F *hRandom = new TH1F("hRandom", "LFSR output-code distribution", 256*4, -0.5, 256*4 + 0.5) ;   // extra values simply goes into overflow bin

   int bin = 1 ;

   while (filePtr >> value) {

      //std::cout << value << endl ;

      hRandom->SetBinContent(bin,value) ;

      bin++ ;
   }

   filePtr.close() ;

   hRandom->Draw() ;


   // the "random" sequence repeats after 256 values, show only 4 repeated sequences
   hRandom->GetXaxis()->SetRangeUser(0, 256*4) ;


   // cosmetics
   hRandom->GetXaxis()->SetTitle("tick") ;
   hRandom->GetYaxis()->SetTitle("LFSR[7:0] integer value") ;
   hRandom->GetYaxis()->CenterTitle() ;

   gPad->SetGridx() ;
   gPad->SetGridy() ;

   // set y-axis log scale for easier pattern recognition
   //gPad->SetLogy() ;
   gPad->Modified() ;
   gPad->Update() ;

}

