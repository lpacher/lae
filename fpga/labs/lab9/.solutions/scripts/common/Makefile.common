
#######################################
##   preamble (reserved variables)   ##
#######################################

##
## **IMPORTANT
##
## This is a fully UNIX-compliant Makefile that can run on both Linux and Windows systems.
## On Windows, please ensure that all required Linux executables are available in the search
## path from the Command Prompt. Required executables are:
##
## make.exe bash.exe mkdir.exe echo.exe rm.exe tclsh.exe
##

## 'make' extra flags
MAKEFLAGS += --warn-undefined-variables --debug

## Bash configuration (be picky and exit immediately on any error)
SHELL := bash
.SHELLFLAGS := -e -u -o pipefail -c

## default target
.DEFAULT_GOAL := help


################################################
##   target FPGA device and external memory   ##
################################################

board := Arty
#board := ArtyA7

## default: Artix7 on Digilent Aty/Arty A7 development boards
part  := xc7a35ticsg324-1L

## default: 128 MB Quad SPI Flash on Digilent Arty/Arty A7 development boards (but different chip IDs between Arty And Arty A7)
ifeq ($(board),Arty)
   flash := mt25ql128-spi-x1_x2_x4
else
ifeq ($(board),ArtyA7)
   flash := s25fl128sxxxxxx0-spi-x1_x2_x4
else
   $(error ERROR: Unknown board name $(board))
endif
endif


#########################
##   other variables   ##
#########################

## some useful UNIX aliases
ECHO  := echo -e
RM    := rm -f -v
RMDIR := rm -rf -v
MKDIR := mkdir -p -v


################################
##   Xilinx Vivado settings   ##
################################

## installation check
ifeq ($(shell which vivado 2> /dev/null),)
   @$(error ERROR: No 'vivado' executable found in search path! Force an exit now...)
endif 


##
## **NOTE
##
## There is no Windows equivalent for the Linux & operator to fork in background the execution of a program
## invoked at the command line. Most of Windows programs launched from the Command Prompt by default already 
## start in background leaving the shell alive. Unfortunately this is not the case for the vivado executable. 
## In order to have portable flows between Linux and Windows the proposed solution is to forward the execution
## of 'vivado -mode gui' to tclsh using the Tcl command 'exec' which accepts the usage of the & instead.
##

## by default, run Vivado/XSim flows in BATCH mode
#mode ?= gui
#mode ?= tcl
mode ?= batch


##############################################
##   export variables to tclsh and Vivado   ##
##############################################

##
## **NOTE
##
## Use the strip function to avoid interpreting whitespace as a non-empty values
## in case the design uses only one HDL language.
##

## export target device and memory IDs to implementation flows
export XILINX_DEVICE=$(part)
export QFLASH_MEMORY=$(flash)

## export the chosen working directory to all flows
export WORK_DIR

## export HDL variables to xvlog/xvhdl/xelab flows
export RTL_TOP_MODULE
export SIM_TOP_MODULE

ifneq ($(strip $(RTL_VLOG_SOURCES)),)
   export RTL_VLOG_SOURCES
endif

ifneq ($(strip $(SIM_VLOG_SOURCES)),)
   export SIM_VLOG_SOURCES
endif

ifneq ($(strip $(VLOG_SOURCES)),)
   export VLOG_SOURCES
endif

ifneq ($(strip $(VLOG_DEFINES)),)
   export VLOG_DEFINES
endif

ifneq ($(strip $(RTL_VHDL_SOURCES)),)
   export RTL_VHDL_SOURCES
endif

ifneq ($(strip $(SIM_VHDL_SOURCES)),)
   export SIM_VHDL_SOURCES
endif

ifneq ($(strip $(VHDL_SOURCES)),)
   export VHDL_SOURCES
endif

ifneq ($(strip $(IPS_SOURCES)),)
   export IPS_SOURCES
endif


################################
##   targets implementation   ##
################################

MAKEFILE_COMMON  := $(TCL_DIR)/common/Makefile.common
MAKEFILE_SIM     := $(TCL_DIR)/sim/Makefile.sim
MAKEFILE_BUILD   := $(TCL_DIR)/build/Makefile.build
MAKEFILE_INSTALL := $(TCL_DIR)/install/Makefile.install

##
## **IMPORTANT
##
## None of implemented targets are on-disk files with build dependencies!
## Declare each target as PHONY.
##


## default target (if nothing is passed to 'make' just call the 'help' target)
.PHONY : default
default : help


##
## Main help target (automatically generate Makefile documentation).
## Credits: https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
##

.PHONY : help
help : ## Command line help

	@$(ECHO) "\nUsage: make <target> [mode=gui|tcl|batch] [variables]"

	@$(ECHO) "\nCommon targets:\n"
	@grep -E '^[a-zA-Z_-|/]+ :.*?## .*$$' $(MAKEFILE_COMMON) | awk 'BEGIN {FS = ":.*?## "}; {printf "- make \033[36m%-18s\033[0m %s\n", $$1, $$2}'

	@$(ECHO) "\nSimulation targets:\n"
	@grep -E '^[a-zA-Z_-|/]+ :.*?## .*$$' $(MAKEFILE_SIM) | awk 'BEGIN {FS = ":.*?## "}; {printf "- make \033[36m%-18s\033[0m %s\n", $$1, $$2}'
	
	@$(ECHO) "\nImplementation targets:\n"
	@grep -E '^[a-zA-Z_-|/]+ :.*?## .*$$' $(MAKEFILE_BUILD) | awk 'BEGIN {FS = ":.*?## "}; {printf "- make \033[36m%-18s\033[0m %s\n", $$1, $$2}'

	@$(ECHO) "\nProgramming targets:\n"
	@grep -E '^[a-zA-Z_-|/]+ :.*?## .*$$' $(MAKEFILE_INSTALL) | awk 'BEGIN {FS = ":.*?## "}; {printf "- make \033[36m%-18s\033[0m %s\n", $$1, $$2}'

	@$(ECHO) ""
	@$(ECHO) "Target Xilinx device:            $(XILINX_DEVICE)"
	@$(ECHO) "External Quad SPI Flash memory:  $(QFLASH_MEMORY)"
	@$(ECHO) ""

	@$(ECHO) "\nExamples:"
	@$(ECHO) ""
	@$(ECHO) "   % make compile [hdl=/path/to/verilog.v|hdl=/path/to/vhdl.vhd]"
	@$(ECHO) "   % make sim [mode=gui|tcl|batch]"
	@$(ECHO) "   % make build"
	@$(ECHO) "   % make install"
	@$(ECHO) "   % make install/flash [board=Arty|ArtyA7]"
	@$(ECHO) "   % make build/restore dcp=work/build/outputs/mapped.dcp [mode=gui|tcl]\n\n"
##____________________________________________________________________________________________________


############################
##   working area setup   ##
############################

.PHONY : area
area : ## Create a new fresh working area with all necessary directories used in the flows

	@$(MKDIR) $(RTL_DIR)
	@$(MKDIR) $(SIM_DIR)

	@$(MKDIR) $(TCL_DIR)/common
	@$(MKDIR) $(TCL_DIR)/sim
	@$(MKDIR) $(TCL_DIR)/build
	@$(MKDIR) $(TCL_DIR)/install
	@$(MKDIR) $(TCL_DIR)/debug

	@$(MKDIR) $(BIN_DIR)

	@$(MKDIR) $(DOC_DIR)
	@$(MKDIR) $(IPS_DIR)
	@$(MKDIR) $(XDC_DIR)

	@$(MKDIR) $(WORK_DIR)/sim
	@$(MKDIR) $(WORK_DIR)/sim/log
	@$(MKDIR) $(WORK_DIR)/sim/tmp
	@$(MKDIR) $(WORK_DIR)/sim/test
	@$(MKDIR) $(WORK_DIR)/sim/vcd
	@$(MKDIR) $(WORK_DIR)/sim/wdb

	@$(MKDIR) $(WORK_DIR)/build
	@$(MKDIR) $(WORK_DIR)/build/log
	@$(MKDIR) $(WORK_DIR)/build/tmp
	@$(MKDIR) $(WORK_DIR)/build/test
	@$(MKDIR) $(WORK_DIR)/build/outputs
	@$(MKDIR) $(WORK_DIR)/build/reports

	@$(MKDIR) $(TEMP_DIR)
	@$(MKDIR) $(TEST_DIR)

	@$(ECHO) "\n   -- Working area setup completed !\n\n"
##____________________________________________________________________________________________________


##############################
##   IP-generation target   ##
##############################

## empty variable to optionally specify a Xilinx Core Instance (.xci) configuration file
xci :=

ifneq ($(xci),)
   export XCI_FILE=$(xci)
endif

.PHONY : ip
ip : $(TCL_DIR)/common/init.tcl $(TCL_DIR)/common/ip.tcl ## Launch Vivado IP flow in GUI mode or compile IP from XCI file (make ip xci=/path/to/IP.xci)

ifeq ($(wildcard $(IPS_DIR)/.*),)
	@$(error ERROR: Missing IPs directory ! Run 'make area' before running the flows.)
else
ifeq ($(mode),gui)
	@echo "exec vivado -mode gui \
	   -source $(TCL_DIR)/common/init.tcl -source $(TCL_DIR)/common/ip.tcl \
	   -notrace -log $(LOG_DIR)/$@.log -nojournal &" | tclsh -norc
else
	@vivado -mode $(mode) \
	   -source $(TCL_DIR)/common/init.tcl -source $(TCL_DIR)/common/ip.tcl \
	   -notrace -log $(LOG_DIR)/$@.log -nojournal
endif
endif
##_______________________________________________________________________________________


#######################
##   Other targets   ##
#######################

.PHONY : gui
gui : ## Start Vivado in GUI mode and keep the shell alive

	@echo "exec vivado -mode gui &" | tclsh -norc
##____________________________________________________________________________________________________

